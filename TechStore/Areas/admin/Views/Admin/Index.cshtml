@{
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";  // If you are using a custom layout for Admin area
 ViewData["Title"] = "Admin - User Management";
}



<h2 >@ViewData["Title"]</h2 >

<!-- Butoni për krijimin e përdoruesit -->
<button onclick="openCreateUserModal()">Create User</button>

<div id="user-list-container" style="margin-bottom:50px">
    <!-- User list will be generated by JavaScript -->
</div>

<!-- Modal për krijimin e përdoruesit -->
<div id="createUserModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeCreateUserModal()">&times;</span>
        <h3>Create User</h3>
        <form id="createUserForm">
            <label for="createName">Name</label>
            <input type="text" id="createName" required><br><br>
            <label for="createEmail">Email</label>
            <input type="email" id="createEmail" required><br><br>
            <label for="createPhone">Phone</label>
            <input type="text" id="createPhone"><br><br>
            <label for="createPassword">Password</label>
            <input type="password" id="createPassword" required><br><br>
            <label for="createRole">Role</label>
            <select id="createRole"> 
                <option value="User">User</option>
                <option value="Manager">Manager</option>
                <option value="Admin">Admin</option>
            </select><br><br>
            <button type="button" onclick="createUser()">Create</button>
        </form>
    </div>
</div>

<!-- Modal për editimin e përdoruesit -->
<div id="editUserModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeEditUserModal()">&times;</span>
        <h3>Edit User</h3>
        <form id="editUserForm">
            <input type="hidden" id="editUserId">
            <label for="editName">Name</label>
            <input type="text" id="editName" required><br><br>
            <label for="editEmail">Email</label>
            <input type="email" id="editEmail" required><br><br>
            <label for="editPhone">Phone</label>
            <input type="text" id="editPhone"><br><br>
            <button type="button" onclick="saveUser()">Save</button>
        </form>
    </div>
</div>

<!-- Custom alert box -->
<div id="custom-alert" class="hidden"></div>

@section Scripts {
    <script>
        let currentUserId = null;

        document.addEventListener('DOMContentLoaded', function () {
            fetch('https://localhost:7056/api/user')
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('user-list-container');
                    let table = `
                        <table class="user-table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Username</th>
                                    <th>Email</th>
                                    <th>Phone Number</th>
                                    <th>Role</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                    `;
                    data.forEach(user => {
                        table += `
                            <tr>
                                <td>${user.name || 'N/A'}</td>
                                <td>${user.userName || 'N/A'}</td>
                                <td>${user.email || 'N/A'}</td>
                                <td>${user.phoneNumber || 'N/A'}</td>
                                <td>
                                    <select onchange="assignRole('${user.id}', this)" class="role-dropdown">
                                        <option value="User" ${user.role === "User" ? "selected" : ""}>User</option>
                                        <option value="Manager" ${user.role === "Manager" ? "selected" : ""}>Manager</option>
                                        <option value="Admin" ${user.role === "Admin" ? "selected" : ""}>Admin</option>
                                    </select>
                                </td>
                                <td>
                                    <button class="edit-btn" onclick="editUser('${user.id}')">Edit</button>
                                    <button class="delete-btn" onclick="deleteUser('${user.id}')">Delete</button>
                                </td>
                            </tr>
                        `;
                    });

                    table += '</tbody></table>';
                    container.innerHTML = table;
                })
                .catch(err => {
                    console.error('Error fetching user data:', err);
                    showAlert('Error fetching user data', 'error');
                });
        });

        function assignRole(userId, dropdown) {
            const selectedRole = dropdown.value;
            fetch('https://localhost:7056/api/admin/assign-role', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId, role: selectedRole })
            })
            .then(response => response.text())
            .then(message => {
                showAlert(message, 'success');
            })
            .catch(err => {
                console.error('Error assigning role:', err);
                showAlert('Error assigning role!', 'error');
            });
        }

        function deleteUser(userId) {
            if (confirm("Are you sure you want to delete this user?")) {
                fetch(`https://localhost:7056/api/admin/users/${userId}`, {
                    method: 'DELETE'
                })
                .then(response => response.text())
                .then(message => {
                    showAlert(message, 'success');
                    location.reload();
                })
                .catch(err => {
                    console.error('Error deleting user:', err);
                    showAlert('Error deleting user!', 'error');
                });
            }
        }

        function editUser(userId) {
            fetch(`https://localhost:7056/api/v1/user/${userId}`)
                .then(response => response.json())
                .then(user => {
                    document.getElementById('editUserId').value = user.id;
                    document.getElementById('editName').value = user.name;
                    document.getElementById('editEmail').value = user.email;
                    document.getElementById('editPhone').value = user.phoneNumber || '';
                    document.getElementById('editUserModal').style.display = "block"; // Show modal
                })
                .catch(err => {
                    console.error('Error fetching user data:', err);
                    showAlert('Error fetching user data', 'error');
                });
        }

        function saveUser() {
            const userId = document.getElementById('editUserId').value;
            const name = document.getElementById('editName').value;
            const email = document.getElementById('editEmail').value;
            const phone = document.getElementById('editPhone').value;

            fetch('https://localhost:7056/api/admin/update-user', {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: userId, name, email, phoneNumber: phone })
            })
            .then(response => response.text())
            .then(message => {
                showAlert(message, 'success');
                closeEditUserModal();
                location.reload();
            })
            .catch(err => {
                console.error('Error saving user data:', err);
                showAlert('Error saving user data!', 'error');
            });
        }

        function createUser() {
            const name = document.getElementById('createName').value;
            const email = document.getElementById('createEmail').value;
            const phone = document.getElementById('createPhone').value;
            const password = document.getElementById('createPassword').value;
            const role = document.getElementById('createRole').value;

            fetch('https://localhost:7056/api/admin/create-user', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name, email, phoneNumber: phone, password, role })
            })
            .then(response => response.text())
            .then(message => {
                showAlert(message, 'success');
                closeCreateUserModal();
                location.reload();
            })
            .catch(err => {
                console.error('Error creating user:', err);
                showAlert('Error creating user!', 'error');
            });
        }

        function showAlert(message, type) {
            const alertBox = document.getElementById('custom-alert');
            alertBox.textContent = message;
            alertBox.className = `custom-alert ${type}`;
            alertBox.style.display = "block"; // Ensure alert is visible
            setTimeout(() => {
                alertBox.style.display = "none";
            }, 3000);
        }

        function closeCreateUserModal() {
            document.getElementById('createUserModal').style.display = "none";
        }

        function closeEditUserModal() {
            document.getElementById('editUserModal').style.display = "none";
        }

        function openCreateUserModal() {
            document.getElementById('createUserModal').style.display = "block";
        }
    </script>
}

<!-- Stilimi -->
<style>
    /* Tabela e përdoruesve */
    .user-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
    }

        .user-table th, .user-table td {
            border: 1px solid #e0e0e0;
            padding: 15px;
            text-align: left;
            font-size: 16px;
        }

        .user-table th {
            background-color: #0e2238;
            color: white;
            font-weight: 600;
        }

        .user-table td {
            background-color: #fff;
            color: #333;
        }

        .user-table tr:hover {
            background-color: #f9f9f9;
        }

    /* Butoni për krijimin e përdoruesit */
    button {
        background-color: #4DB8FF; /* Kaltrë për butonat */
        color: white;
        border: none;
        padding: 12px 20px;
        text-align: center;
        font-size: 16px;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

        button:hover {
            background-color: #42a6e0;
        }

    /* Modalet */
    .modal {
        display: none;
        position: fixed;
        z-index: 9999;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        padding-top: 100px;
        animation: fadeIn 0.3s ease;
    }

    .modal-content {
        background-color: #fff;
        margin: 5% auto;
        padding: 30px;
        border: 2px solid #ddd;
        width: 80%;
        max-width: 500px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .close {
        color: #aaa;
        font-size: 30px;
        font-weight: bold;
        position: absolute;
        top: 15px;
        right: 20px;
        cursor: pointer;
    }

        .close:hover,
        .close:focus {
            color: #000;
        }


    /* Fushat e formularëve */
    input[type="text"], input[type="email"], input[type="password"], select {
        width: 100%;
        padding: 12px;
        margin: 8px 0;
        border: 2px solid #ddd;
        border-radius: 5px;
        font-size: 16px;
        transition: border-color 0.3s ease;
    }

        input[type="text"]:focus, input[type="email"]:focus, input[type="password"]:focus, select:focus {
            border-color: #4DB8FF; /* Kaltrë për fokusin */
        }

    /* Stili për alarmin */
    .custom-alert {
        background-color: #00cc66; /* Kaltrë për sukses */
        color: white;
        padding: 15px;
        margin-bottom: 20px;
        text-align: center;
        display: none;
        border-radius: 5px;
        font-size: 16px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

        .custom-alert.success {
            background-color: #00cc66; /* Kaltrë për sukses */
        }

        .custom-alert.error {
            background-color: #f44336;
        }

    /* Stili për dropdown role */
    .role-dropdown {
        width: 100%;
        padding: 12px;
        margin-top: 8px;
        font-size: 16px;
        border: 2px solid #ddd;
        border-radius: 5px;
        background-color: #fff;
    }

        .role-dropdown:hover {
            border-color: #4DB8FF;
        }

    /* Butonat për editimin dhe fshirjen */
    button.edit-btn, button.delete-btn {
        background-color: #4DB8FF; /* Portokalli për butonin "Edit" */
        border: 2px solid #ffcc80;
        padding: 8px 16px;
        font-size: 14px;
        border-radius: 5px;
        cursor: pointer;
        margin: 5px;
        transition: background-color 0.3s ease;
    }

        button.edit-btn:hover {
            background-color: #4DB8FF;
            color: white;
        }

    button.delete-btn {
        background-color: #f44336; /* E kuqe për butonin "Delete" */
        border: 2px solid #e57373;
    }

        button.delete-btn:hover {
            background-color: #d32f2f;
            color: white;
        }

    /* Stili i përgjithshëm i faqes */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f4f4f4;
        margin: 0;
        padding: 0;
    }
    h2 {
        font-size: 24px;
        color: #333;
        text-align: center;
        margin: 20px 0;
    }


    </style >
